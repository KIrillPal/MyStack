#ifndef STACK_ERRORS_H
#define STACK_ERRORS_H

#include <stdio.h>

enum StackResult {
// General
	STACK_OK                 = 0x00000000,
	STACK_NOT_INITALIZED     = 0x11111111,
	STACK_MEM_NOT_ALLOCATE   = 0x22222222,
	STACK_BAD_ARGUMENT       = 0x44444444,
	STACK_EMPTY              = 0x88888888,
	STACK_MEM_CORRUPTED      = 0xFFFFFFFF,
// Dump					    
	STACK_DUMP_ERROR         = 0xF0000000,
// Push				         
	STACK_PUSH_ERROR         = 0x0F000000,
	STACK_PUSH_NOSTACK_ERROR = STACK_PUSH_ERROR & STACK_NOT_INITALIZED,
	STACK_PUSH_NOALLOC_ERROR = STACK_PUSH_ERROR & STACK_MEM_NOT_ALLOCATE,
	STACK_PUSH_BADITEM_ERROR = STACK_PUSH_ERROR & STACK_BAD_ARGUMENT,
// Pop				         
	STACK_POP_ERROR          = 0x00F00000,
	STACK_POP_NOSTACK_ERROR  = STACK_POP_ERROR & STACK_NOT_INITALIZED,
	STACK_POP_EMPTY_ERROR    = STACK_POP_ERROR & STACK_EMPTY,
	STACK_POP_BADITEM_ERROR  = STACK_POP_ERROR & STACK_BAD_ARGUMENT,
	STACK_POP_NOALLOC_ERROR  = STACK_POP_ERROR & STACK_MEM_NOT_ALLOCATE,
// Top				         
	STACK_TOP_ERROR          = 0x000F0000,
	STACK_TOP_NOSTACK_ERROR  = STACK_TOP_ERROR & STACK_NOT_INITALIZED,
	STACK_TOP_EMPTY_ERROR    = STACK_TOP_ERROR & STACK_EMPTY,
	STACK_TOP_BADITEM_ERROR  = STACK_TOP_ERROR & STACK_BAD_ARGUMENT,
	STACK_TOP_NOALLOC_ERROR  = STACK_TOP_ERROR & STACK_MEM_NOT_ALLOCATE,
// Realloc				    
	STACK_REALLOC_ERROR      = 0x000F000,
	STACK_REALLOC_NOSTACK_ERROR = STACK_REALLOC_ERROR & STACK_NOT_INITALIZED,
// Ctor					    
	STACK_CTOR_ERROR         = 0x00000F00,
// Dtor
	STACK_DTOR_ERROR         = 0x00000F0,
	STACK_DTOR_NOSTACK_ERROR = STACK_DTOR_ERROR & STACK_NOT_INITALIZED

};

typedef StackResult StackResult;

#define MERGE_RESULTS(base, code) static_cast<StackResult>(base & code)

void StackPrintErrDescription(StackResult err, FILE * outerr);

#endif